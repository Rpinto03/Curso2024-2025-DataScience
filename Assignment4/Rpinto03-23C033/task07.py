# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EbZ0lzHNTIrV3-OnwEk0cyo-d0JMaaL9

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subclass WHERE {
    ?Subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs":RDFS, "ns":ns}
)
# Visualize the results
for r in g.query(q1):
  print(r.Subclass)

for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  SELECT ?individuals WHERE {
    {
      ?individuals a ns:Person.
    }
  UNION
    {
      ?Class rdfs:subClassOf ns:Person.
      ?individuals a ?Class.
    }
  }
  ''',
  initNs = { "ns" : ns, "rdfs" : RDFS}
)

# Visualize the results
for r in g.query(q2):
  print(r.individuals)

for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for h, i, j in g.triples((None, RDF.type, s)):
    print(h)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individuals WHERE {
    { ?individuals a ns:Person.}
  UNION
    {?individuals a ns:Animal.}
  }
  ''',
  initNs = {"ns" : ns}
)
for r in g.query(q3):
  print(r.individuals)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO

FOAF = Namespace("http://xmlns.com/foaf/0.1/")

q4 = prepareQuery('''
SELECT ?person WHERE{
  ?person foaf:knows ns:RockySmith.
  }
  ''',
  initNs= { "foaf":FOAF, "ns":ns})

# Visualize the results
for r in g.query(q4):
  print(r.person)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
SELECT ?animal WHERE{
  ?animal a ns:Animal.
  ?otro a ns:Animal.
  ?animal foaf:knows ?otro.

  }
  ''',
  initNs= { "foaf":FOAF, "ns":ns})
# Visualize the results
for r in g.query(q5):
  print(r.animal)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
SELECT ?livingthing ?age WHERE{
  ?livingthing foaf:age ?age.
  }
  ORDER BY DESC(?age)
  ''',
  initNs= { "foaf":FOAF, "ns":ns, "rdfs":RDFS})
# Visualize the results
for r in g.query(q6):
  print( r.livingthing, r.age)